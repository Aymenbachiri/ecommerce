// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum AddressType {
  SHIPPING
  BILLING
  BOTH
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  hashedPassword String?
  emailVerified  DateTime?
  image          String?
  role           Role            @default(CUSTOMER)
  accounts       Account[]
  sessions       Session[]
  Authenticator  Authenticator[]

  orders        Order[]
  cartItems     CartItem[]
  wishlistItems WishlistItem[]
  addresses     Address[]
  reviews       Review[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID         String  @id @map("_id")
  userId               String  @db.ObjectId
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, credentialID])
}

model Product {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String
  price         Float
  originalPrice Float?
  stock         Int      @default(0)
  sku           String?  @unique
  featured      Boolean  @default(false)
  published     Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  images        ProductImage[]
  categories    CategoriesOnProducts[]
  orderItems    OrderItem[]
  cartItems     CartItem[]
  reviews       Review[]
  wishlistItems WishlistItem[]

  @@map("products")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   @unique
  slug        String   @unique
  description String?
  image       String?
  parentId    String?  @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products      CategoriesOnProducts[]
  parent        Category?              @relation("CategoryToSubcategory", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories Category[]             @relation("CategoryToSubcategory")

  @@map("categories")
}

model CategoriesOnProducts {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  categoryId String   @db.ObjectId
  assignedAt DateTime @default(now())

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@map("categories_products")
}

model ProductImage {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  url       String
  alt       String?
  order     Int      @default(0)
  productId String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model Order {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  userId            String        @db.ObjectId
  status            OrderStatus   @default(PENDING)
  total             Float
  subtotal          Float
  tax               Float
  shipping          Float
  shippingAddressId String?       @db.ObjectId
  billingAddressId  String?       @db.ObjectId
  paymentIntentId   String?
  paymentStatus     PaymentStatus @default(PENDING)
  notes             String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  shippingAddress Address?    @relation(fields: [shippingAddressId], references: [id])
  billingAddress  Address?    @relation("BillingAddress", fields: [billingAddressId], references: [id])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model WishlistItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Address {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  name      String
  street    String
  city      String
  state     String
  zipCode   String
  country   String
  phone     String?
  isDefault Boolean     @default(false)
  type      AddressType @default(SHIPPING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[]
  billingOrders  Order[] @relation("BillingAddress")

  @@map("addresses")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  productId String   @db.ObjectId
  rating    Int
  comment   String?
  title     String?
  published Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model Discount {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  code        String       @unique
  description String?
  type        DiscountType
  value       Float
  minAmount   Float?
  maxAmount   Float?
  startDate   DateTime
  endDate     DateTime
  usageLimit  Int?
  usageCount  Int          @default(0)
  active      Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("discounts")
}

model Analytics {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  date              DateTime @unique
  totalSales        Float    @default(0)
  totalOrders       Int      @default(0)
  totalCustomers    Int      @default(0)
  averageOrderValue Float    @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("analytics")
}
